var documenterSearchIndex = {"docs":
[{"location":"10-tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"10-tutorial/#Explanation","page":"Tutorial","title":"Explanation","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"To simplify, let's consider a single profile, for a single year. Let's denote it as p_i, where i = 1dotsN. The clustering process consists of:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Split N into (let's assume equal) periods of size m = period_duration. We can rename p_i as\np_jk qquad textwhere qquad j = 1dotsm quad k = 1dotsNm\nCompute num_rps representative periods\nr_jell qquad textwhere qquad j = 1dotsm qquad ell = 1dotstextnum_rps\nDuring computation of the representative periods, we obtained weight w_kell between the period k and the representative period ell, such that\np_jk = sum_ell = 1^textnum_rps r_jell  w_kell qquad forall j = 1dotsm quad k = 1dotsNm","category":"page"},{"location":"10-tutorial/#High-level-API/DuckDB-API","page":"Tutorial","title":"High level API/DuckDB API","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"note: High level API\nThis tutorial focuses on the highest level of the API, which requires the use of a DuckDB connection.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The high-level API of TulipaClustering focuses on using TulipaClustering as part of the Tulipa workflow. This API consists of three main functions: transform_wide_to_long!, cluster!, and dummy_cluster!. In this tutorial we'll use all three.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Normally, you will have the DuckDB connection from the larger Tulipa workflow, so here we will create a temporary connection with fake data to show an example of the workflow. You can look into the source code of this documentation to see how to create this fake data.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Here is the content of that connection:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"using DataFrames, DuckDB\n\nnice_query(str) = DataFrame(DuckDB.query(connection, str))\nnice_query(\"show tables\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"And here is the first rows of profiles_wide:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"from profiles_wide limit 10\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"And finally, this is the plot of the data:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"using Plots\n\ntable = DuckDB.query(connection, \"from profiles_wide\")\nplot(size=(800, 400))\ntimestep = [row.timestep for row in table]\nfor profile_name in (:avail, :solar, :demand)\n    value = [row[profile_name] for row in table]\n    plot!(timestep, value, lab=string(profile_name))\nend\nplot!()","category":"page"},{"location":"10-tutorial/#Transform-a-wide-profiles-table-into-a-long-table","page":"Tutorial","title":"Transform a wide profiles table into a long table","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"warning: Required\nThe long table format is a requirement of TulipaClustering, even for the dummy clustering example.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"In this context, a wide table is a table where each new profile occupies a new column. A long table is a table where the profile names are stacked in a column with the corresponding values in a separate column. Given the name of the source table (in this case, profiles_wide), we can create a long table with the following call:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"using TulipaClustering\n\ntransform_wide_to_long!(connection, \"profiles_wide\", \"profiles\")\n\nnice_query(\"FROM profiles LIMIT 10\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Here, we decided to save the long profiles table with the name profiles to use in the clustering below.","category":"page"},{"location":"10-tutorial/#Dummy-Clustering","page":"Tutorial","title":"Dummy Clustering","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"A dummy cluster will essentially ignore the clustering and create the necessary tables for the next steps in the Tulipa workflow.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"for table_name in (\n    \"rep_periods_data\",\n    \"rep_periods_mapping\",\n    \"profiles_rep_periods\",\n    \"timeframe_data\",\n)\n    DuckDB.query(connection, \"DROP TABLE IF EXISTS $table_name\")\nend\n\nclusters = dummy_cluster!(connection)\n\nnice_query(\"FROM rep_periods_data LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM rep_periods_mapping LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM profiles_rep_periods LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM timeframe_data LIMIT 5\")","category":"page"},{"location":"10-tutorial/#Clustering","page":"Tutorial","title":"Clustering","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"We can perform a real clustering by using the cluster! function with two extra arguments (see Explanation for their deeped meaning):","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"period_duration: How long are the split periods;\nnum_rps: How many representative periods.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"period_duration = 24\nnum_rps = 3\n\nfor table_name in (\n    \"rep_periods_data\",\n    \"rep_periods_mapping\",\n    \"profiles_rep_periods\",\n    \"timeframe_data\",\n)\n    DuckDB.query(connection, \"DROP TABLE IF EXISTS $table_name\")\nend\n\nclusters = cluster!(connection, period_duration, num_rps)\n\nnice_query(\"FROM rep_periods_data LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM rep_periods_mapping LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM profiles_rep_periods LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"nice_query(\"FROM timeframe_data LIMIT 5\")","category":"page"},{"location":"10-tutorial/#Using-a-custom-layout","page":"Tutorial","title":"Using a custom layout","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"You can customize the in-memory (and output) column names used for the time step and value columns by passing a ProfilesTableLayout to cluster!. The input SQL table must still use the standard column names (profile_name, timestep, value). The layout only affects the in-memory DataFrames and the resulting profiles_rep_periods output table. Other output tables are layout-agnostic.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Below we cluster again but ask the output table to use ts and val instead of the defaults timestep and value:","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"for table_name in (\n    \"rep_periods_data\",\n    \"rep_periods_mapping\",\n    \"profiles_rep_periods\",\n    \"timeframe_data\",\n)\n    DuckDB.query(connection, \"DROP TABLE IF EXISTS $table_name\")\nend\n\nlayout = TulipaClustering.ProfilesTableLayout(; timestep = :ts, value = :val)\nclusters_custom = cluster!(connection, period_duration, num_rps; layout)\n\nnice_query(\"FROM profiles_rep_periods LIMIT 5\")","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice the columns ts and val in the output above (instead of timestep / value).","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"If you prefer to always export the default column names, omit the layout argument.","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/TulipaEnergy/TulipaClustering.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/TulipaEnergy/TulipaClustering.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/TulipaEnergy/TulipaClustering.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#TulipaClustering.AuxiliaryClusteringData","page":"Reference","title":"TulipaClustering.AuxiliaryClusteringData","text":"Structure to hold the time series used in clustering together with some summary statistics on the data.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TulipaClustering.ClusteringResult","page":"Reference","title":"TulipaClustering.ClusteringResult","text":"Structure to hold the clustering result.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TulipaClustering.DataValidationException","page":"Reference","title":"TulipaClustering.DataValidationException","text":"DataValidationException\n\nException related to data validation of the Tulipa Energy Model input data.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TulipaClustering.ProfilesTableLayout","page":"Reference","title":"TulipaClustering.ProfilesTableLayout","text":"ProfilesTableLayout(;key = value, ...)\nProfilesTableLayout(path; ...)\n\nStructure to hold the profiles input data table layout. Column names in the layout are defined by default.\n\nIf path is passed, it is expected to be a string pointing to a TOML file with a key = value list of parameters. Explicit keyword arguments take precedence.\n\nParameters\n\nvalue::Symbol = :value: The column name with the profile values.\ntimestep::Symbol = :timestep: The column name with the time steps in the profile.\nperiod::Symbol = :period: The column name with the period number in the profile.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TulipaClustering.append_period_from_source_df_as_rp!-Tuple{DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.append_period_from_source_df_as_rp!","text":"appendperiodfromsourcedfasrp!(df; sourcedf, period, rp, keycolumns, layout = ProfilesTableLayout())\n\nExtracts a period with index period from source_df and appends it as a representative period with index rp to df, using key_columns as keys. Respects custom column names via layout.\n\nExamples\n\nDefault layout:\n\njulia> source_df = DataFrame([:period => [1, 1, 2, 2], :timestep => [1, 2, 1, 2], :a .=> \"b\", :value => 5:8])\n4×4 DataFrame\n Row │ period  timestep  a       value\n     │ Int64   Int64      String  Int64\n─────┼──────────────────────────────────\n   1 │      1          1  b           5\n   2 │      1          2  b           6\n   3 │      2          1  b           7\n   4 │      2          2  b           8\n\njulia> df = DataFrame([:rep_period => [1, 1, 2, 2], :timestep => [1, 2, 1, 2], :a .=> \"a\", :value => 1:4])\n4×4 DataFrame\n Row │ rep_period  timestep  a       value\n     │ Int64       Int64      String  Int64\n─────┼──────────────────────────────────────\n   1 │          1          1  a           1\n   2 │          1          2  a           2\n   3 │          2          1  a           3\n   4 │          2          2  a           4\n\njulia> TulipaClustering.append_period_from_source_df_as_rp!(df; source_df, period = 2, rp = 3, key_columns = [:timestep, :a])\n6×4 DataFrame\n Row │ rep_period  timestep  a       value\n     │ Int64       Int64      String  Int64\n─────┼──────────────────────────────────────\n   1 │          1          1  a           1\n   2 │          1          2  a           2\n   3 │          2          1  a           3\n   4 │          2          2  a           4\n   5 │          3          1  b           7\n   6 │          3          2  b           8\n\nCustom layout:\n\njulia> layout = ProfilesTableLayout(; period=:p, timestep=:ts, value=:val)\njulia> src = DataFrame([:p => [1,1,2,2], :ts => [1,2,1,2], :a .=> \"b\", :val => 5:8])\njulia> df = DataFrame([:rep_period => [1,1], :ts => [1,2], :a .=> \"a\", :val => [1,2]])\njulia> TulipaClustering.append_period_from_source_df_as_rp!(df; source_df = src, period = 2, rp = 3, key_columns = [:ts, :a], layout)\n4×4 DataFrame\n Row │ rep_period  ts    a       val\n   │ Int64       Int64  String  Int64\n─────┼──────────────────────────────────\n   1 │          1     1  a           1\n   2 │          1     2  a           2\n   3 │          3     1  b           7\n   4 │          3     2  b           8\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.cluster!-Tuple{Any, Any, Any}","page":"Reference","title":"TulipaClustering.cluster!","text":"cluster!(\n    connection,\n    period_duration,\n    num_rps;\n    input_database_schema = \"\",\n    input_profile_table_name = \"profiles\",\n    database_schema = \"\",\n    drop_incomplete_last_period::Bool = false,\n    method::Symbol = :k_means,\n    distance::SemiMetric = SqEuclidean(),\n    initial_representatives::AbstractDataFrame = DataFrame(),\n    layout::ProfilesTableLayout = ProfilesTableLayout(),\n    weight_type::Symbol = :convex,\n    tol::Float64 = 1e-2,\n    clustering_kwargs = Dict(),\n    weight_fitting_kwargs = Dict(),\n)\n\nConvenience function to cluster the table named in input_profile_table_name using period_duration and num_rps. The resulting tables profiles_rep_periods, rep_periods_mapping, and rep_periods_data are loaded into connection in the database_schema, if given, and enriched with year information.\n\nThis function extracts the table (expecting columns profile_name, timestep, value), then calls split_into_periods!, find_representative_periods, fit_rep_period_weights!, and finally write_clustering_result_to_tables.\n\nArguments\n\nRequired\n\nconnection: DuckDB connection\nperiod_duration: Duration of each period, i.e., number of timesteps.\nnum_rps: Number of findrepresentativeperiods\n\nKeyword arguments\n\ninput_database_schema (default \"\"): Schema of the input tables\ninput_profile_table_name (default \"profiles\"): Default name of the profiles table inside the above schemaa\ndatabase_schema (default \"\"): Schema of the output tables\ndrop_incomplete_last_period (default false): controls how the last period is treated if it is not complete: if this parameter is set to true, the incomplete period is dropped and the weights are rescaled accordingly; otherwise, clustering is done for n_rp - 1 periods, and the last period is added as a special shorter representative period\nmethod (default :k_means): clustering method to use, either:kmeansand:kmedoids`\ndistance (default Distances.SqEuclidean()): semimetric used to measure distance between data points.\ninitial_representatives initial representatives that should be   included in the clustering. The period column in the initial representatives   should be 1-indexed and the key columns should be the same as in the clustering data.   For the hull methods it will be added before clustering, for :kmeans and :kmedoids   it will be added after clustering.\nlayout (default ProfilesTableLayout()): describes the column names for period, timestep, and value in in-memory DataFrames. It does not change the SQL input table schema, which must contain profile_name, timestep, and value. Weight fitting operates on matrices and does not use layout.\nweight_type (default :convex): the type of weights to find; possible values are:\n:convex: each period is represented as a convex sum of the representative periods (a sum with nonnegative weights adding into one)\n:conical: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights)\n:conical_bounded: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights) with the total weight bounded from above by one.\ntol (default 1e-2): algorithm's tolerance; when the weights are adjusted by a value less then or equal to tol, they stop being fitted further.\nclustering_kwargs (default Dict()): Extra keyword arguments passed to find_representative_periods\nweight_fitting_kwargs (default Dict()): Extra keyword arguments passed to fit_rep_period_weights! (e.g., niters, learning_rate, adaptive_grad).\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.combine_periods!-Tuple{DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.combine_periods!","text":"combine_periods!(df; layout = ProfilesTableLayout())\n\nCombine per-period time steps into a single global timestep column in-place.\n\nGiven a long-format dataframe df with (at least) a per-period timestep column and, optionally, a period column (names provided by layout), this function rewrites the timestep column so that time becomes a single global, monotonically increasing index across all periods, then removes the original period column.\n\nPeriod length inference:\n\nThe (nominal) period duration L is inferred as the maximum value found in the per-period time-step column across the whole dataframe (NOT per period).\nEach row's global timestep is computed as (period - 1) * L + timestep.\nIf the final period is shorter than L, the resulting global time index will simply end earlier; missing intermediate global timesteps are not created.\n\nArguments:\n\ndf::AbstractDataFrame (mutated): Source data in long format.\nlayout::ProfilesTableLayout: Describes the column names for period and timestep (defaults to standard names). Pass a custom layout if your dataframe uses different symbols.\n\nBehavior & edge cases:\n\nIf the timestep column (as specified by layout) is missing, a DomainError is thrown.\nIf the period column is absent, the function is a no-op (returns immediately).\nNon-1-based or non-consecutive per-period timesteps are not validated; unusual values may result in non-contiguous or non-strictly increasing global indices.\nWorks in-place; the modified dataframe (without period) is also returned for convenience.\n\nExamples\n\nBasic usage with default layout:\n\njulia> df = DataFrame([:period => [1, 1, 2], :timestep => [1, 2, 1], :value => 1:3])\n3×3 DataFrame\n Row │ period  timestep  value\n     │ Int64   Int64      Int64\n─────┼──────────────────────────\n   1 │      1          1      1\n   2 │      1          2      2\n   3 │      2          1      3\n\njulia> TulipaClustering.combine_periods!(df)\n3×2 DataFrame\n Row │ timestep  value\n     │ Int64      Int64\n─────┼──────────────────\n   1 │         1      1\n   2 │         2      2\n   3 │         3      3\n\nCustom column names via a layout:\n\njulia> layout = ProfilesTableLayout(; period = :p, timestep = :ts)\njulia> df = DataFrame([:p => [1,1,2], :ts => [1,2,1], :value => 10:12])\n3×3 DataFrame\n Row │ p      ts   value\n     │ Int64  Int64  Int64\n─────┼─────────────────────\n   1 │     1     1     10\n   2 │     1     2     11\n   3 │     2     1     12\n\njulia> TulipaClustering.combine_periods!(df; layout)\n3×2 DataFrame\n Row │ ts    value\n     │ Int64  Int64\n─────┼──────────────\n   1 │    1     10\n   2 │    2     11\n   3 │    3     12\n\nNo period column (no-op):\n\njulia> df = DataFrame([:timestep => 1:3, :value => 4:6])\njulia> TulipaClustering.combine_periods!(df)\n3×2 DataFrame\n Row │ timestep  value\n     │ Int64      Int64\n─────┼──────────────────\n   1 │         1      4\n   2 │         2      5\n   3 │         3      6\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.df_to_matrix_and_keys-Tuple{DataFrames.AbstractDataFrame, Vector{Symbol}}","page":"Reference","title":"TulipaClustering.df_to_matrix_and_keys","text":"dftomatrixandkeys(df, key_columns; layout = ProfilesTableLayout())\n\nConverts a long-format dataframe df to a matrix, using the value/period columns from layout. Columns listed in key_columns are kept as keys.\n\nReturns (matrix::Matrix{Float64}, keys::DataFrame).\n\nExamples\n\nDefault layout:\n\njulia> df = DataFrame([:period => [1, 1, 2, 2], :timestep => [1, 2, 1, 2], :a .=> \"a\", :value => 1:4])\n4×4 DataFrame\n Row │ period  timestep  a       value\n     │ Int64   Int64      String  Int64\n─────┼──────────────────────────────────\n   1 │      1          1  a           1\n   2 │      1          2  a           2\n   3 │      2          1  a           3\n   4 │      2          2  a           4\n\njulia> m, k = TulipaClustering.df_to_matrix_and_keys(df, [:timestep, :a]); m\n2×2 Matrix{Float64}:\n 1.0  3.0\n 2.0  4.0\n\njulia> k\n2×2 DataFrame\n Row │ timestep  a\n     │ Int64      String\n─────┼───────────────────\n   1 │         1  a\n   2 │         2  a\n\nCustom layout:\n\njulia> layout = ProfilesTableLayout(; period=:p, timestep=:ts, value=:val)\njulia> df = DataFrame([:p => [1,1,2,2], :ts => [1,2,1,2], :a .=> \"a\", :val => 1:4])\njulia> m, k = TulipaClustering.df_to_matrix_and_keys(df, [:ts, :a]; layout); m\n2×2 Matrix{Float64}:\n 1.0  3.0\n 2.0  4.0\n\njulia> k\n2×2 DataFrame\n Row │ ts    a\n     │ Int64  String\n─────┼────────────────\n   1 │    1  a\n   2 │    2  a\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.dummy_cluster!-Tuple{Any}","page":"Reference","title":"TulipaClustering.dummy_cluster!","text":"dummy_cluster!(connection)\n\nConvenience function to create the necessary columns and tables when clustering is not required.\n\nThis is essentially creating a single representative period with the size of the whole profile. See cluster! for more details of what is created.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.find_auxiliary_data-Tuple{DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.find_auxiliary_data","text":"find_auxiliary_data(clustering_data; layout = ProfilesTableLayout())\n\nCalculates auxiliary data associated with clustering_data, considering custom column names via layout.\n\nReturns AuxiliaryClusteringData with:\n\nkey_columns: key columns in the dataframe\nperiod_duration: nominal duration of periods (max timestep across data)\nlast_period_duration: duration of the last period\nn_periods: total number of periods\n\nExample\n\njulia> df = DataFrame([:period => [1,1,2,2], :timestep => [1,2,1,2], :a => \"x\", :value => 10:13])\njulia> aux = TulipaClustering.find_auxiliary_data(df)\nAuxiliaryClusteringData([:timestep, :a], 2, 2, 2, nothing)\n\njulia> layout = ProfilesTableLayout(; period=:p, timestep=:ts, value=:val)\njulia> df2 = DataFrame([:p => [1,1,2,2], :ts => [1,2,1,1], :a => \"x\", :val => 10:13])\njulia> TulipaClustering.find_auxiliary_data(df2; layout)\nAuxiliaryClusteringData([:ts, :a], 2, 1, 2, nothing)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.find_period_weights-Tuple{Int64, Int64, Int64, Bool}","page":"Reference","title":"TulipaClustering.find_period_weights","text":"find_period_weights(period_duration, last_period_duration, n_periods, drop_incomplete_periods)\n\nFinds weights of two different types of periods in the clustering data:\n\ncomplete periods: these are all of the periods with length equal to period_duration.\nincomplete last period: if last period duration is less than period_duration, it is incomplete.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.find_representative_periods-Tuple{DataFrames.AbstractDataFrame, Int64}","page":"Reference","title":"TulipaClustering.find_representative_periods","text":"findrepresentativeperiods(     clusteringdata,     nrp;     dropincompletelastperiod = false,     method = :kmeans,     distance = SqEuclidean(),     initial_representatives = DataFrame(),     layout = ProfilesTableLayout(),     kwargs...,   )\n\nFinds representative periods via data clustering. Honors custom column names via layout (defaults to (:period, :timestep, :value)).\n\nArguments\n\nclustering_data: long-format data to cluster.\nn_rp: number of representative periods to find.\ndrop_incomplete_last_period: controls how the last period is treated if it is not complete: if this parameter is set to true, the incomplete period is dropped and the weights are rescaled accordingly; otherwise, clustering is done for n_rp - 1 periods, and the last period is added as a special shorter representative period.\nmethod: clustering method to use :k_means, :k_medoids, :convex_hull, :convex_hull_with_null, or :conical_hull.\ndistance: semimetric used to measure distance between data points.\ninitial_representatives: dataframe of initial RPs. It must use the same key columns and follow the same layout as clustering_data. For hull methods the RPs are prepended before clustering; for :k_means/:k_medoids they are appended after clustering.\nlayout: ProfilesTableLayout describing the column names.\nother named arguments are forwarded to the clustering method.\n\nReturns\n\nReturns a ClusteringResult with:\n\nprofiles::DataFrame: Long-format representative profiles with columns :rep_period, layout.timestep, all key columns (auxiliary_data.key_columns), and layout.value.\nweight_matrix::SparseMatrixCSC{Float64,Int} (or dense Matrix{Float64}): rows correspond to source periods and columns to representative periods; entry (p, r) is the weight of period p assigned to representative r. If the last period is incomplete and drop_incomplete_last_period is false, it maps to its own representative column with its specific weight; if dropped, it is excluded from the rows.\nclustering_matrix::Matrix{Float64}: The feature-by-period matrix used for clustering (features are derived from layout.timestep crossed with key columns).\nrp_matrix::Matrix{Float64}: The representative profiles in matrix form (same feature layout as clustering_matrix).\nauxiliary_data::AuxiliaryClusteringData: Auxiliary metadata such as key_columns, period_duration, last_period_duration, n_periods, and (for applicable methods) medoids indices.\n\nExamples\n\nFinding two representatives using default values:\n\njulia> df = DataFrame(\n           period = kron(1:4, ones(Int, 2)),\n           timestep = repeat(1:2, 4),\n           profile = \"A\",\n           value = 1:8,\n         )\n\njulia> res = TulipaClustering.find_representative_periods(df, 2)\n\nFinding two representatives using k-medoids and a custom layout:\n\njulia> layout = ProfilesTableLayout(; period = :p, timestep = :ts, value = :val)\n\njulia> df = DataFrame(\n           p = kron(1:4, ones(Int, 2)),\n           ts = repeat(1:2, 4),\n           profile = \"A\",\n           val = 1:8,\n         )\n\njulia> res = TulipaClustering.find_representative_periods(df, 2; method = :k_medoids, layout)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.fit_rep_period_weights!-Tuple{TulipaClustering.ClusteringResult}","page":"Reference","title":"TulipaClustering.fit_rep_period_weights!","text":"fitrepperiodweights!(weightmatrix, clusteringmatrix, rpmatrix; weight_type, tol, args...)\n\nGiven the initial weight guesses, finds better weights for convex or conical combinations of representative periods. For conical weights, it is possible to bound the total weight by one.\n\nThe arguments:\n\nclustering_result: the result of running TulipaClustering.find_representative_periods\nweight_type: the type of weights to find; possible values are:\n:convex: each period is represented as a convex sum of the representative periods (a sum with nonnegative weights adding into one)\n:conical: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights)\n:conical_bounded: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights) with the total weight bounded from above by one.\ntol: algorithm's tolerance; when the weights are adjusted by a value less then or equal to tol, they stop being fitted further.\nother arguments control the projected subgradient method; they are passed through to TulipaClustering.projected_subgradient_descent!.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.fit_rep_period_weights!-Tuple{Union{SparseArrays.SparseMatrixCSC{Float64, Int64}, Matrix{Float64}}, Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"TulipaClustering.fit_rep_period_weights!","text":"fitrepperiodweights!(weightmatrix, clusteringmatrix, rpmatrix; weight_type, tol, args...)\n\nGiven the initial weight guesses, finds better weights for convex or conical combinations of representative periods. For conical weights, it is possible to bound the total weight by one.\n\nThe arguments:\n\nweight_matrix: the initial guess for weights; the weights are adjusted using a projected subgradient descent method\nclustering_matrix: the matrix of raw clustering data\nrp_matrix: the matrix of raw representative period data\nweight_type: the type of weights to find; possible values are:\n:convex: each period is represented as a convex sum of the representative periods (a sum with nonnegative weights adding into one)\n:conical: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights)\n:conical_bounded: each period is represented as a conical sum of the representative periods (a sum with nonnegative weights) with the total weight bounded from above by one.\ntol: algorithm's tolerance; when the weights are adjusted by a value less then or equal to tol, they stop being fitted further.\nshow_progress: if true, a progress bar will be displayed.\nother arguments control the projected subgradient method; they are passed through to TulipaClustering.projected_subgradient_descent!.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.greedy_convex_hull-Tuple{AbstractMatrix{Float64}}","page":"Reference","title":"TulipaClustering.greedy_convex_hull","text":"greedy_convex_hull(matrix; n_points, distance, initial_indices, mean_vector)\n\nGreedy method for finding n_points points in a hull of the dataset. The points   are added iteratively, at each step the point that is the furthest away from the   hull of the current set of points is found and added to the hull.\n\nmatrix: the clustering matrix\nn_points: number of hull points to find\ndistance: distance semimetric\ninitial_indices: initial points which must be added to the hull, can be nothing\nmean_vector: when adding the first point (if initial_indices is not given),   it will be chosen as the point furthest away from the mean_vector; this can be   nothing, in which case the first step will add a point furtherst away from   the centroid (the mean) of the dataset\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.matrix_and_keys_to_df-Tuple{Matrix{Float64}, DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.matrix_and_keys_to_df","text":"matrix_and_keys_to_df(matrix, keys; layout = ProfilesTableLayout())\n\nConverts a matrix matrix to a long-format dataframe with columns (:rep_period, layout.timestep, keys..., layout.value).\n\nExamples\n\nDefault layout:\n\njulia> m = [1.0 3.0; 2.0 4.0]\n2×2 Matrix{Float64}:\n 1.0  3.0\n 2.0  4.0\n\njulia> k = DataFrame([:timestep => 1:2, :a .=> \"a\"])\n2×2 DataFrame\n Row │ timestep  a\n     │ Int64      String\n─────┼───────────────────\n   1 │         1  a\n   2 │         2  a\n\njulia> TulipaClustering.matrix_and_keys_to_df(m, k)\n4×4 DataFrame\n Row │ rep_period  timestep  a       value\n     │ Int64       Int64      String  Float64\n─────┼────────────────────────────────────────\n   1 │          1          1  a           1.0\n   2 │          1          2  a           2.0\n   3 │          2          1  a           3.0\n   4 │          2          2  a           4.0\n\nCustom layout:\n\njulia> layout = ProfilesTableLayout(; timestep=:ts, value=:val)\njulia> k = DataFrame([:ts => 1:2, :a .=> \"a\"])\njulia> TulipaClustering.matrix_and_keys_to_df(m, k; layout)\n4×4 DataFrame\n Row │ rep_period  ts    a       val\n   │ Int64       Int64  String  Float64\n─────┼────────────────────────────────────\n   1 │          1     1  a           1.0\n   2 │          1     2  a           2.0\n   3 │          2     1  a           3.0\n   4 │          2     2  a           4.0\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.project_onto_nonnegative_orthant-Tuple{Vector{Float64}}","page":"Reference","title":"TulipaClustering.project_onto_nonnegative_orthant","text":"projectontononnegative_orthant(vector)\n\nProjects vector onto the nonnegative orthant. This projection is trivial: replace negative components of the vector with zeros.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.project_onto_simplex-Tuple{Vector{Float64}}","page":"Reference","title":"TulipaClustering.project_onto_simplex","text":"projectontosimplex(vector)\n\nProjects vector onto a unit simplex using Michelot's algorithm in Condat's accelerated implementation (2017). See Figure 2 of Condat, L. Fast projection onto the simplex and the  ball. Math. Program. 158, 575–585 (2016).. For the details on the meanings of v, ṽ, ρ and other variables, see the original paper.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.project_onto_standard_basis-Tuple{Vector{Float64}}","page":"Reference","title":"TulipaClustering.project_onto_standard_basis","text":"projectontostandard_basis(vector)\n\nProjects vector onto the standard basis. This projection is trivial: replace all components of the vector with zeros, except for the largest one, which is replaced with one.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.projected_subgradient_descent!-Tuple{Vector{Float64}}","page":"Reference","title":"TulipaClustering.projected_subgradient_descent!","text":"projectedsubgradientdescent!(x; gradient, projection, niters, rtol, learningrate, adaptivegrad)\n\nFits x using the projected gradient descent scheme.\n\nThe arguments:\n\nx: the value to fit\nsubgradient: the subgradient operator, that is, a function that takes vectors of the same shape as x as inputs and returns a subgradient of the loss at that point; the fitting is done to minimize the corresponding implicit loss\nprojection: the projection operator, that is, a function that, given a vector x, finds a point within some subspace that is closest to x\nniters: maximum number of projected gradient descent iterations\ntol: tolerance; when no components of x improve by more than tol, the algorithm stops\nlearning_rate: learning rate of the algorithm\nadaptive_grad: if true, the learning rate is adjusted using the adaptive gradient method, see John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive Subgradient Methods for Online Learning and Stochastic   Optimization. J. Mach. Learn. Res. 12, null (2/1/2011), 2121–2159.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.split_into_periods!-Tuple{DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.split_into_periods!","text":"split_into_periods!(df; period_duration=nothing, layout=ProfilesTableLayout())\n\nModifies a dataframe df by separating the time column into periods of length period_duration, respecting custom column names provided by layout.\n\nThe new data is written into two columns defined by the layout:\n\nlayout.period: the period ID\nlayout.timestep: the time step within the current period\n\nIf period_duration is nothing, then all time steps are in a single period (ID 1).\n\nExamples\n\njulia> df = DataFrame([:timestep => 1:4, :value => 5:8])\n4×2 DataFrame\n Row │ timestep  value\n     │ Int64      Int64\n─────┼──────────────────\n   1 │         1      5\n   2 │         2      6\n   3 │         3      7\n   4 │         4      8\n\njulia> TulipaClustering.split_into_periods!(df; period_duration=2)\n4×3 DataFrame\n Row │ period  timestep  value\n     │ Int64   Int64      Int64\n─────┼──────────────────────────\n   1 │      1          1      5\n   2 │      1          2      6\n   3 │      2          1      7\n   4 │      2          2      8\n\njulia> df = DataFrame([:period => [1, 1, 2], :timestep => [1, 2, 1], :value => 1:3])\n3×3 DataFrame\n Row │ period  timestep  value\n     │ Int64   Int64      Int64\n─────┼──────────────────────────\n   1 │      1          1      1\n   2 │      1          2      2\n   3 │      2          1      3\n\njulia> TulipaClustering.split_into_periods!(df; period_duration=1)\n3×3 DataFrame\n Row │ period  timestep  value\n     │ Int64   Int64      Int64\n─────┼──────────────────────────\n   1 │      1          1      1\n   2 │      2          1      2\n   3 │      3          1      3\n\njulia> TulipaClustering.split_into_periods!(df)\n3×3 DataFrame\n Row │ period  timestep  value\n     │ Int64   Int64      Int64\n─────┼──────────────────────────\n   1 │      1          1      1\n   2 │      1          2      2\n   3 │      1          3      3\n\nCustom column names via a layout:\n\njulia> layout = ProfilesTableLayout(; timestep = :time_step, period = :periods)\njulia> df = DataFrame([:time_step => 1:4, :value => 5:8])\n4×2 DataFrame\n Row │ time_step  value\n    │ Int64      Int64\n─────┼──────────────────\n  1 │         1      5\n  2 │         2      6\n  3 │         3      7\n  4 │         4      8\n\njulia> TulipaClustering.split_into_periods!(df; period_duration=2, layout)\n4×3 DataFrame\n Row │ periods  time_step  value\n    │ Int64    Int64      Int64\n─────┼───────────────────────────\n  1 │       1          1      5\n  2 │       1          2      6\n  3 │       2          1      7\n  4 │       2          2      8\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.transform_wide_to_long!-Tuple{Any, Any, Any}","page":"Reference","title":"TulipaClustering.transform_wide_to_long!","text":"transform_wide_to_long!(\n    connection,\n    wide_table_name,\n    long_table_name;\n)\n\nConvenience function to convert a table in wide format to long format using DuckDB. Originally aimed at converting a profile table like the following:\n\n| year | timestep | name1 | name2 | ⋯  | nameN | | –– | –––– | ––- | ––- | – | ––- | | 2030 |        1 |   1.0 |   2.5 | ⋯  |   0.0 | | 2030 |        2 |   1.5 |   2.6 | ⋯  |   0.0 | | 2030 |        3 |   2.0 |   2.6 | ⋯  |   0.0 |\n\nTo a table like the following:\n\nyear timestep profile_name value\n2030 1 name1 1.0\n2030 2 name1 1.5\n2030 3 name1 2.0\n2030 1 name2 2.5\n2030 2 name2 2.6\n2030 3 name2 2.6\n⋮ ⋮ ⋮ ⋮\n2030 1 nameN 0.0\n2030 2 nameN 0.0\n2030 3 nameN 0.0\n\nThis conversion is done using the UNPIVOT SQL command from DuckDB.\n\nKeyword arguments\n\nexclude_columns = [\"year\", \"timestep\"]: Which tables to exclude from the conversion. Note that if you have more columns that you want to exclude from the wide table, e.g., scenario, you can add them to this list, e.g., [\"scenario\", \"year\", \"timestep\"].\nname_column = \"profile_name\": Name of the new column that contains the names of the old columns\nvalue_column = \"value\": Name of the new column that holds the values from the old columns\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.validate_data!-Tuple{Any}","page":"Reference","title":"TulipaClustering.validate_data!","text":"validate_data!(connection)\n\nValidate that the required data in connection exists and is correct. Throws a DataValidationException if any error is found.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.validate_df_and_find_key_columns-Tuple{DataFrames.AbstractDataFrame}","page":"Reference","title":"TulipaClustering.validate_df_and_find_key_columns","text":"validatedfandfindkey_columns(df; layout = ProfilesTableLayout())\n\nChecks that dataframe df contains the necessary columns (as described by layout) and returns a list of columns that act as keys (i.e., unique data identifiers within different periods). Keys are all columns except layout.period and layout.value.\n\nExamples\n\nDefault column names:\n\njulia> df = DataFrame([:period => [1, 1, 2], :timestep => [1, 2, 1], :a .=> \"a\", :value => 1:3])\n3×4 DataFrame\n Row │ period  timestep  a       value\n     │ Int64   Int64      String  Int64\n─────┼──────────────────────────────────\n   1 │      1          1  a           1\n   2 │      1          2  a           2\n   3 │      2          1  a           3\n\njulia> TulipaClustering.validate_df_and_find_key_columns(df)\n2-element Vector{Symbol}:\n :timestep\n :a\n\nCustom column names via a layout:\n\njulia> layout = ProfilesTableLayout(; period = :p, timestep = :ts, value = :val)\njulia> df = DataFrame(p = [1, 1, 2], ts = [1, 2, 1], a = \"a\", val = 1:3)\n3×4 DataFrame\n Row │ p      ts   a       val\n     │ Int64  Int64  String  Int64\n─────┼─────────────────────────────\n   1 │     1     1  a           1\n   2 │     1     2  a           2\n   3 │     2     1  a           3\n\njulia> TulipaClustering.validate_df_and_find_key_columns(df; layout)\n2-element Vector{Symbol}:\n :ts\n :a\n\nMissing columns error references layout-provided names:\n\njulia> df = DataFrame([:value => 1])\njulia> TulipaClustering.validate_df_and_find_key_columns(df)\nERROR: DomainError: DataFrame must contain columns `timestep` and `value`\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.validate_initial_representatives","page":"Reference","title":"TulipaClustering.validate_initial_representatives","text":"validate_initial_representatives(\n  initial_representatives,\n  clustering_data,\n  aux_clustering,\n  last_period_excluded,\n  n_rp;\n  layout = ProfilesTableLayout()\n)\n\nValidates that initial_representatives is compatible with clustering_data for use in find_representative_periods, considering custom column names via layout. Checks include:\n\nKey columns match between initial representatives and clustering data.\nInitial representatives do not contain an incomplete last period.\nBoth dataframes have the same set of keys (no extra/missing keys).\nThe number of periods in initial_representatives does not exceed n_rp (adjusted for last_period_excluded).\n\nExamples\n\njulia> df = DataFrame([:period => [1,1,2,2], :timestep => [1,2,1,2], :zone .=> \"A\", :value => 10:13])\njulia> aux = TulipaClustering.find_auxiliary_data(df)\njulia> init = DataFrame([:period => [1,1], :timestep => [1,2], :zone .=> \"A\", :value => [10, 11]])\njulia> TulipaClustering.validate_initial_representatives(init, df, aux, false, 2)\n\nCustom layout:\n\njulia> layout = ProfilesTableLayout(; period=:p, timestep=:ts, value=:val)\njulia> df2 = DataFrame([:p => [1,1,2,2], :ts => [1,2,1,2], :zone .=> \"A\", :val => 10:13])\njulia> aux2 = TulipaClustering.find_auxiliary_data(df2; layout)\njulia> init2 = DataFrame([:p => [1,1], :ts => [1,2], :zone .=> \"A\", :val => [10, 11]])\njulia> TulipaClustering.validate_initial_representatives(init2, df2, aux2, false, 2; layout)\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#TulipaClustering.weight_matrix_to_df-Tuple{Union{SparseArrays.SparseMatrixCSC{Float64, Int64}, Matrix{Float64}}}","page":"Reference","title":"TulipaClustering.weight_matrix_to_df","text":"weight_matrix_to_df(weights)\n\nConverts a weight matrix from a (sparse) matrix, which is more convenient for internal computations, to a dataframe, which is better for saving into a file. Zero weights are dropped to avoid cluttering the dataframe.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TulipaClustering.write_clustering_result_to_tables-Tuple{Any, TulipaClustering.ClusteringResult}","page":"Reference","title":"TulipaClustering.write_clustering_result_to_tables","text":"write_clustering_result_to_tables(connection, clustering_result; database_schema=\"\", layout=ProfilesTableLayout())\n\nWrites a TulipaClustering.ClusteringResult into DuckDB tables in connection.\n\nColumn naming:\n\nThe profiles_rep_periods table preserves the column names provided by layout for the time and value axes. Resulting columns are: profile_name, rep_period, <layout.timestep>, <layout.value>.\nOther tables (rep_periods_data, rep_periods_mapping, timeframe_data) are not affected by the layout and keep their original schema.\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"#Welcome","page":"Welcome","title":"Welcome","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Documentation for TulipaClustering.jl.","category":"page"},{"location":"#Contributors","page":"Welcome","title":"Contributors","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/greg-neustroev\"><img src=\"https://avatars.githubusercontent.com/u/32451432?v=4?s=100\" width=\"100px;\" alt=\"Greg Neustroev\"/><br /><sub><b>Greg Neustroev</b></sub></a><br /><a href=\"#code-greg-neustroev\" title=\"Code\">💻</a> <a href=\"#doc-greg-neustroev\" title=\"Documentation\">📖</a> <a href=\"#maintenance-greg-neustroev\" title=\"Maintenance\">🚧</a> <a href=\"#review-greg-neustroev\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/g-moralesespana\"><img src=\"https://avatars.githubusercontent.com/u/42405171?v=4?s=100\" width=\"100px;\" alt=\"Germán Morales\"/><br /><sub><b>Germán Morales</b></sub></a><br /><a href=\"#ideas-g-moralesespana\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://abelsiqueira.com\"><img src=\"https://avatars.githubusercontent.com/u/1068752?v=4?s=100\" width=\"100px;\" alt=\"Abel Soares Siqueira\"/><br /><sub><b>Abel Soares Siqueira</b></sub></a><br /><a href=\"#code-abelsiqueira\" title=\"Code\">💻</a> <a href=\"#review-abelsiqueira\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/datejada\"><img src=\"https://avatars.githubusercontent.com/u/12887482?v=4?s=100\" width=\"100px;\" alt=\"Diego Alejandro Tejada Arango\"/><br /><sub><b>Diego Alejandro Tejada Arango</b></sub></a><br /><a href=\"#code-datejada\" title=\"Code\">💻</a> <a href=\"#doc-datejada\" title=\"Documentation\">📖</a> <a href=\"#review-datejada\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-datejada\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/clizbe\"><img src=\"https://avatars.githubusercontent.com/u/11889283?v=4?s=100\" width=\"100px;\" alt=\"Lauren Clisby\"/><br /><sub><b>Lauren Clisby</b></sub></a><br /><a href=\"#projectManagement-clizbe\" title=\"Project Management\">📆</a> <a href=\"#ideas-clizbe\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lottekremer\"><img src=\"https://avatars.githubusercontent.com/u/119004215?v=4?s=100\" width=\"100px;\" alt=\"Lotte Kremer\"/><br /><sub><b>Lotte Kremer</b></sub></a><br /><a href=\"#code-lottekremer\" title=\"Code\">💻</a> <a href=\"#ideas-lottekremer\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
